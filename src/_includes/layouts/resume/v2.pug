- const gv2 = generalV2
doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1")
    meta(name="robots" content="noindex,nofollow")
    link(rel="stylesheet", href=`${assets}/print_helper.css`)
    meta(name="author" content=gv2.headline.name)
    meta(name="description" content=`Suraj's Resume for ${job_info.role} role at ${job_info.company}`)
    link(rel="preconnect" href="https://fonts.bunny.net")
    link(href="https://fonts.bunny.net/css?family=lato:400,400i,700" rel="stylesheet")
    //- meta(name="keywords" content="HTML, CSS, JavaScript")
    title=gv2.headline.name.replaceAll(/\.|\s+/g, '')+"-"+job_info.role.replaceAll(" ", "")+"-"+metadata.last_modified.toISOString().substring(2, 10)
    style 
        li::marker {margin-right: 0px;}
  body(style="font-family: 'Lato', 'Open Sans';")
    main#content
      //- Style variables
      - const headlineColor = style?.color?.background ?? "gray-0"
      - const lightBorder = style?.color?.border.light ?? "gray-0"
      - const darkBorder = style?.color?.border.dark ?? "gray-0"
      - const barSize = style?.barWidth ?? 1
      - const includeGPA = style?.includeGPA ?? false
      - const skillsSize = style?.skillsSize ?? "sm"
      - const includeMonth = style?.includeMonth ?? false
      //- Content Variables
      - const contacts = content.resume.contactOrder ?? ["website", "email", "phone"]
      block content
        if structure.includeCoverLetter
            p#cover-letter TODO: Insert Cover Letter
        #resume(grid=`~ cols-${structure.numberOfColumns || 1}` gap=1)
            for rBlock in structure.resumeOrder
                - const spanNum = rBlock.span && rBlock.span > 0 && rBlock.span < structure.numberOfColumns ? rBlock.span : structure.numberOfColumns
                case rBlock.type
                    //- TODO: Make into mixins
                    when "headline"
                        h1(text="4xl center" col=`span-${spanNum}` mb=1 font="semibold")=gv2.headline.name
                    when "contacts"
                        div(col=`span-${spanNum}` flex justify="evenly" text="center xs" mb=2)
                            for entry in Array.from(contacts.entries())
                                - const index = entry[0]
                                - const contact = entry[1]
                                - const divider = index === 0 ? "" : " | "
                                span=divider
                                case contact
                                    when "email"
                                        - const emailContact = private_contacts.email[content.resume.emailIndex || 0];
                                        a(href="mailto:" + emailContact underline="~ offset-4" decoration="from-font")="Email: " + emailContact
                                    when "phone"
                                        span(underline="~ offset-4" decoration="from-font")="Phone: " + private_contacts.phone[content.resume.phoneIndex || 0]
                                    when "github"
                                        - const github = footer.nav.find(n => n.name.toLowerCase() === "github")
                                        if github
                                            a(href=github.link underline="~ offset-4" decoration="from-font")="GitHub: "+github.link.replace(/^https?\:\/\/(?:www\.)?github.com\//i, "")
                                    when "linkedin"
                                        - const linkedin = footer.nav.find(n => n.name.toLowerCase() === "linkedin")
                                        if linkedin
                                            a(href=linkedin.link underline="~ offset-4" decoration="from-font")="LinkedIn: "+linkedin.link.replace(/^https?\:\/\/(?:www\.)?linkedin.com\/in\//i, "")
                                    when "website"
                                        a(href=base_url underline="~ offset-4" decoration="from-font")="Website: "+base_url.replace(/^https?\:\/\//i, "")
                                    default
                                        span=contact
                    when "summary"
                        if content.resume.summary
                            p(col=`span-${spanNum}` text="center" mb=1)=content.resume.summary
                    when "experience"
                        div(col=`span-${spanNum}` mb=2)
                            h2(text="2xl center") Professional Experience
                            - const genExperience = gv2.experience
                            for experience in content.resume.experience
                                - const expInfo = Object.assign({}, experience, gv2.experience.flatMap(e => e.roles.filter(r => r.key === experience.roleKey).map(r => {return {company: e.company, link: e.link, ...r}}))[0], )
                                div(flex="~ row wrap" mb=1)
                                    h3(text="lg" basis="3/4" font="medium")=expInfo.altTitle || expInfo.title
                                    - const endDate = expInfo.isCurrent || expInfo.end === undefined ? "Present" : `${expInfo.end.month.padStart(2, "0")}/${expInfo.end.year}`
                                    p(text="sm right" basis="1/4") #[em= `${expInfo.start.month.padStart(2, "0")}/${expInfo.start.year}-${endDate}`]
                                    div.basis-full
                                    p(text="sm" basis="full" pl=2) #[strong=expInfo.company] (#[em= typeof expInfo.location === "string" ? expInfo.location : expInfo.location.join(" / ")])
                                    if expInfo.summary
                                        p(basis="full" pl=2)= expInfo.summary
                                ul.list-disc.list-inside.ml-2.font-normal.mb-3
                                    for accomplishment in expInfo.accomplishments
                                        li(leading="tight" mb=0 ml=0)= accomplishment.content
                    when "education"
                        div(col=`span-${spanNum}` mb=2)
                            h2(text="2xl center") Education
                            for edu in gv2.education
                                div(flex="~ row wrap" mb=1)
                                    h3(text="lg" flex="grow" basis="3/4")=edu.org
                                    p(text="sm right" basis="1/4") #[em= `${edu.grad.month.padStart(2, "0")}/${edu.grad.year}`]
                                    div.basis-full
                                    - const degreeName = edu.degrees.map(degree => `${degree.name}, ${degree.rank}`).join("  &  ")
                                    - const gpa = Math.max(...edu.degrees.filter(degree => degree.gpa).map(degree => degree.gpa), edu.gpa || 0)
                                    p(flex="grow" basis="3/4" text="sm")=degreeName
                                    if gpa
                                        p(text="xs right" basis="1/4")=`GPA: ${gpa.toLocaleString(undefined, {minimumFractionDigits:1, maximumFractionDigits:1})}`
                    when "skills"
                        div(col=`span-${spanNum}`)
                            h2(text="2xl center" pb=1) Key Skills
                            div(flex="~ wrap" gap=2)
                                for skillList in content.resume.skills
                                    div(flex="auto" text="sm")
                                        strong=`${skillList.category}: `
                                        span=skillList.skill.map(s => s.text).join(', ')

                    when "projects"
                        div(col=`span-${spanNum}`)
                            h2(text="2xl center") Highlighted Projects
                            //- TODO
                            p(col=`span-${spanNum}`) Projects
                    when "divider"
                        hr
                    default
                        p(col=`span-full`) UNKNOWN BLOCK
  